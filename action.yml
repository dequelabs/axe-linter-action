name: Run axe Accessibility Linter
description: Lints all changed files using the axe Accessibility Linter
inputs:
  # no files input, just files ignore
  github_token:
    description: Github Token
    required: true
  api_key:
    description: axe Linter API Key
    required: true
runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v2
    - uses: mikefarah/yq@master
    - uses: sergeysova/jq-action@v2
    - name: Get changed files
      id: changed_files
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      uses: tj-actions/changed-files@v18.7
      with:
        files: |
          **/*.js
          **/*.jsx
          **/*.tsx
          **/*.html
          **/*.vue
          **/*.md
          **/*.markdown
    - name: Create linter issues comment
      if: steps.changed_files.outputs.any_changed == 'true'
      run: |
        Files="${{ steps.changed_files.outputs.all_changed_files }}"
        ApiKey="${{ inputs.api_key }}"
        LinterConfig={}
        # Check to make sure there is an `axe-linter.yml` file in the root level of the repo
        if [ -f axe-linter.yml ]; then
        CheckLinterConfig="$(yq axe-linter.yml)"
          # Make sure that the `axe-linter.yml` file is not empty
          if [ -n "$CheckLinterConfig" ]; then
            LinterConfig="$(yq -o=json axe-linter.yml)"
          fi
        fi
        FoundErrors="0"
        for File in $Files; do
          FileContents="$(cat "$File")"
          RequestBody=$(
            jq \
              --null-input \
              --arg Source "$FileContents" \
              --arg Filename "$File" \
              --argjson Config "$LinterConfig" \
              '{ "source": $Source, "filename": $Filename, "config": $Config }'
          )
          Response=$(
            curl \
              --silent \
              --request POST \
              --url https://axe-linter.deque.com/lint-source \
              --header "content-type: application/json" \
              --header "authorization: $ApiKey" \
              --data "${RequestBody}"
          )
          if [ $(echo "$Response" | jq 'has("error")') = "true" ]; then
            echo axe Linter: $(echo "$Response" | jq -r '.error')
            exit 1
          fi
          ErrorCount=$(echo "$Response" | jq '.report.errors | length')
          if [ "$ErrorCount" != "0" ]; then
            ((FoundErrors += ErrorCount))
          fi
          echo "$Response" |
            jq -r --compact-output '.report.errors[] | .ruleId + " " + (.lineNumber|tostring) + " " + (.column|tostring) + " " + (.endColumn|tostring) + " " + .description' |
            while read -r RuleId Line Column EndColumn Description; do
              echo "::error file=$File,line=$Line,col=$Column,endColumn=$EndColumn,title=Axe Linter::$RuleId - $Description"
            done
        done
        echo "::debug::Found $FoundErrors errors"
        if [ "$FoundErrors" != "0" ]; then
          exit 1
        fi
      shell: bash
